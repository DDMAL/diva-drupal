<?php
/**
 * @file
 * A module for working with diva.js
 */

function diva_schema() {
    $schema = array();
    $schema['diva_data'] = array(
        'description' => t("Data storage for each diva node"),
        'fields' => array(
            'divaid' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
            ),
            'nid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'default' => 0,
                'description' => 'The Node ID'
            ),
            'image_path' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => FALSE,
            ),
            'adaptive_padding' => array(
                'type' => 'float',
                'default' => 0.05,
            ),
            'fullscreen' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'gotopage' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'grid' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'gridslider' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'keyscroll' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'spacescroll' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'zoomslider' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'fixed_padding' => array(
                'type' => 'int',
                'default' => 10,
                'size' => 'medium'
            ),
            'fixed_height_grid' => array(
                'type' => 'int',
                'default' => 1,
                'size' => 'tiny'
            ),
            'max_pages_per_row' => array(
                'type' => 'int',
                'default' => 8,
                'size' => 'small'
            ),
            'min_pages_per_row' => array(
                'type' => 'int',
                'default' => 2,
                'size' => 'small'
            ),
            'def_pages_per_row' => array(
                'type' => 'int',
                'default' => 5,
                'size' => 'small'
            ),
            'max_zoomlevel' => array(
                'type' => 'int',
                'default' => 0,
                'size' => 'small'
            ),
            'min_zoomlevel' => array(
                'type' => 'int',
                'default' => 0,
                'size' => 'small'
            ),
            'def_zoomlevel' => array(
                'type' => 'int',
                'default' => 2,
                'size' => 'small'
            ),
            'tile_width' => array(
                'type' => 'int',
                'default' => 256,
                'size' => 'small'
            ),
            'tile_height' => array(
                'type' => 'int',
                'default' => 256,
                'size' => 'small'
            ),
            'viewport' => array(
                'type' => 'int',
                'default' => 200,
                'size' => 'small'
            ),
            'total_images' => array(
                'type' => 'int',
                'default' => 0,
                'size' => 'small'
            ),
            'lowest_max_zoom' => array(
                'type' => 'int',
                'default' => 0,
                'size' => 'small'
            ),
            'collection_totals' => array(
                'type' => 'blob',
                'serialize' => TRUE,
                'size' => 'big'
            ),
            'plugins' => array(
                'type' => 'blob',
                'serialize' => TRUE,
                'size' => 'big'
            )
        ),
        'primary key' => array('divaid'),
        'indexes' => array(
            'nid' => array('nid')
        ),
        'unique keys' => array(
            'id' => array('divaid'),
        ),
    );

    $schema['diva_images'] = array(
        'description' => t(''),
        'fields' => array(
            'imid' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
            ),
            'divaid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'default' => 0,
                'description' => 'The {diva_data} table ID'
            ),
            'nid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'default' => 0,
                'description' => 'The {node} ID'
            ),
            'image' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE
            ),
            'image_width' => array(
                'type' => 'int',
                'default' => 0,
                'size' => 'small'
            ),
            'image_height' => array(
                'type' => 'int',
                'default' => 0,
                'size' => 'small'
            ),
            'image_max_zoom' => array(
                'type' => 'int',
                'default' => 0,
                'size' => 'small'
            ),
        ),
        'primary key' => array('imid'),
        'indexes' => array(
            'divaid' => array('divaid'),
            'nid' => array('nid'),
            'image_width' => array('image_width'),
            'image_height' => array('image_height'),
        ),
        'unique keys' => array(
            'id' => array('imid')
        )
    );


    $schema['cache_diva'] = array(
        'description' => 'Generic cache table for caching things not separated out into their own tables. Contributed modules may also use this to store cached items.', 
        'fields' => array(
            'cid' => array(
            'description' => 'Primary Key: Unique cache ID.', 
            'type' => 'varchar', 
            'length' => 255, 
            'not null' => TRUE, 
            'default' => '',
        ), 
        'data' => array(
            'description' => 'A collection of data to cache.', 
            'type' => 'blob', 
            'not null' => FALSE, 
            'size' => 'big',
        ), 
        'expire' => array(
            'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.', 
            'type' => 'int', 
            'not null' => TRUE, 
            'default' => 0,
        ), 
        'created' => array(
            'description' => 'A Unix timestamp indicating when the cache entry was created.', 
            'type' => 'int', 
            'not null' => TRUE, 
            'default' => 0,
        ), 
        'headers' => array(
        'description' => 'Any custom HTTP headers to be added to cached data.', 
        'type' => 'text', 
        'not null' => FALSE,
        ), 
        'serialized' => array(
            'description' => 'A flag to indicate whether content is serialized (1) or not (0).', 
            'type' => 'int', 
            'size' => 'small', 
            'not null' => TRUE, 
            'default' => 0,
        ),
    ), 
    'indexes' => array('expire' => array('expire')), 
    'primary key' => array('cid'),
    );

    return $schema;
}

function diva_install() {
    $t = get_t();
    // drupal_install_schema('diva');

    $diva = array(
        'type' => 'diva',
        'name' => $t("Diva Node"),
        'base' => 'node_content',
        'description' => $t("A Diva.js node"),
        'title_label' => $t("Title"),
        'custom' => TRUE,
        'modified' => TRUE,
        'locked' => FALSE
    );

    $content_type = node_type_set_defaults($diva);
    node_type_save($content_type);

    // disable comments by default
    variable_set('comment_diva', '1');

    variable_set("diva_image_server", 'http://example.com:9000/iipsrv.fcgi');
    variable_set("diva_path_to_images", '/var/diva/images');
    variable_set("diva_default_tile_size", "256x256");
    variable_set("diva_plugins", 0);

}

function diva_requirements($phase) {
    $requirements = array();
    $t = get_t();
    if (($phase == 'runtime') || ($phase == 'install')) {
        if ($path = libraries_get_path('diva.js')) {
            $requirements['diva.js'] = array('title' => $t("Diva.js Library"));
            if (!file_exists($path . '/js/diva.js')) {
                $requirements['diva.js']['value'] = $t("Missing");
                $requirements['diva.js']['description'] = $t("You must download the Diva.js library.");
                $requirements['diva.js']['severity'] = REQUIREMENT_ERROR; 
            } else {
                $requirements['diva.js']['value'] = $t("Installed");
                $requirements['diva.js']['severity'] = REQUIREMENT_OK;
                watchdog("diva", t("The Diva module was successfully enabled"));
            }
        }
    }
    return $requirements;
}

function diva_uninstall() {
    node_type_delete('diva');
    drupal_uninstall_schema('diva');

    variable_del('comment_diva');
    variable_del('diva_path_to_images');
    variable_del('diva_image_server');
    variable_del('diva_default_tile_size');
    variable_del('diva_plugins');
}

function _diva_installed_fields() {
    $t = get_t();

}

function _diva_installed_instances() {
    $t = get_t();
}