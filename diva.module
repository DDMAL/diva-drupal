<?php
/**
 * @file
 * A module for working with diva.js
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information
 *
 * @param path
 *  Which path of the site we're using to display help
 * @param arg
 *  Array that holds the current path as returned from arg() function.
 */
function diva_help($path, $arg) {
    switch ($path) {
        case 'admin/help#diva':
            return '<p>'. t("Working with diva.js") . "</p>";
            break;
        default:
            # code...
            break;
    }
}

/**
 * Implements hook_perm
 */

function diva_perm() {
    return array("administer diva module");
}

function diva_init() {
}

function diva_file_mimetype_mapping_alter(&$mapping) {
    $mext = 'gz';
    $mtype = 'application/x-gzip';

    if(!in_array($mtype, $mapping['mimetypes'])) {
        $mapping['mimetypes'][] = $mtype;
    }

    $idx = array_search($mtype, $mapping['mimetypes']);
    $mapping['extensions'][$mext] = $idx;
}

/**
 * Implements hook_menu.
 */
function diva_menu() {
    $items = array();

    $items['admin/config/diva'] = array(
        'title' => "Diva",
        'description' => "Configuration for the Diva module",
        'position' => "right",
        'weight' => -100,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array("administer diva module"),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );

    $items['admin/config/diva/config'] = array(
        'title' => "Diva Config",
        'description' => 'Configuration for the Diva module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('diva_admin_form'),
        'access arguments' => array('administer diva.js'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['diva/divaserve'] = array(
        'page callback' => 'diva_ajax_callback',
        'access arguments' => TRUE,
        'access callback' => TRUE,
        'page arguments' => array(2, 3),
        'type' => MENU_CALLBACK,
        'file' => 'divaserve.inc'
    );

    return $items;
}

function diva_admin_form($form, &$form_state) {
    $form['diva_path_to_vips'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to the VIPS executable'),
        '#default_value' => variable_get('diva_path_to_vips', '/usr/local/bin'),
        '#size' => 12,
        '#maxlength' => 64,
        '#description' => t("The path where the vips software is installed."),
    );

    $form['diva_image_server'] = array(
        '#type' => 'textfield',
        '#title' => t("IIP Image Server"),
        '#default_value' => variable_get('diva_image_server', 'http://example.com:9000/iipsrv.fcgi'),
        '#size' => 64,
        '#maxlength' => 128,
        '#description' => t("Location of the IIP Image Server"),
    );

    $form['diva_default_tile_size'] = array(
        '#type' => 'textfield',
        '#title' => t("Default Tile Size"),
        '#default_value' => variable_get("diva_default_tile_size", "256x256"),
        '#size' => 12,
        '#maxlength' => 12,
        '#description' => t("Default Diva File Size (wxh)")
    );

    return system_settings_form($form);
}

function diva_form_alter(&$form, $form_state, $form_id) {
    dpm($form_id);
    if ($form_id == "diva_node_form") {
        $n = $form['#node'];

        $form['folder_name'] = array(
            '#type' => 'machine_name',
            '#title' => t("Folder Name"),
            '#maxlength' => 128,
            '#machine_name' => array(
                'exists' => '_diva_folder_name_exists',
            ),
            '#default_value' => isset($n->nid) ? $n->folder_name : ""
        );

        $form['diva_images'] = array(
            '#type' => 'file',
            '#title' => t("Image Upload")
        );

        $form['diva'] = array(
            '#type' => 'fieldset',
            '#title' => t("Diva Settings"),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
            '#group' => 'additional_settings'
        );
        $form['diva']['fullscreen'] = array(
            '#type' => 'checkbox',
            '#title' => t("Full-Screen"),
            '#description' => t("Enable Full-screen mode"),
            '#default_value' => isset($n->nid) ? $n->fullscreen : 1
        );
        $form['diva']['goto_page'] = array(
            '#type' => 'checkbox',
            '#title' => t("Go To Page"),
            '#description' => t("Enable Go To Page block"),
            '#default_value' => isset($n->nid) ? $n->gotopage : 0
        );
        $form['diva']['grid'] = array(
            '#type' => 'checkbox',
            '#title' => t("Grid View"),
            '#description' => t("Enable Grid View Mode"),
            '#default_value' => isset($n->nid) ? $n->grid : 1
        );
        $form['diva']['grid_slider'] = array(
            '#type' => 'checkbox',
            '#title' => t("Grid Slider"),
            '#description' => t("Enable the Grid Slider"),
            '#default_value' => isset($n->nid) ? $n->gridslider : 1
        );
        $form['diva']['keyscroll'] = array(
            '#type' => 'checkbox',
            '#title' => t("Key Scroll"),
            '#description' => t("Enable Scroll using Arrow Keys"),
            '#default_value' => isset($n->nid) ? $n->keyscroll : 1
        );
        $form['diva']['spacescroll'] = array(
            '#type' => 'checkbox',
            '#title' => t("Space Scroll"),
            '#description' => t("Enable Scroll Using Spacebar"),
            '#default_value' => isset($n->nid) ? $n->spacescroll : 0
        );
        $form['diva']['zoomslider'] = array(
            '#type' => 'checkbox',
            '#title' => t("Zoom Slider"),
            '#description' => t("Enable the Zoom Slider"),
            '#default_value' => isset($n->nid) ? $n->zoomslider : 1
        );
        $form['diva']['fixed_height_grid'] = array(
            '#type' => 'checkbox',
            '#title' => t("Fixed Height Grid"),
            '#description' => t("Enable Fixed Height Grid"),
            '#default_value' => isset($n->nid) ? $n->fixed_height_grid : 1
        );
        $form['diva']['max_pages_per_row'] = array(
            '#type' => 'textfield',
            '#title' => t("Max Pages Per Row"),
            '#description' => t("Maximum Pages Per Row"),
            '#default_value' => isset($n->nid) ? $n->max_pages_per_row : 8
        );
        $form['diva']['min_pages_per_row'] = array(
            '#type' => 'textfield',
            '#title' => t("Min Pages Per Row"),
            '#description' => t("Minimum Pages Per Row"),
            '#default_value' => isset($n->nid) ? $n->min_pages_per_row : 2
        );
        $form['diva']['def_pages_per_row'] = array(
            '#type' => 'textfield',
            '#title' => t("Default Pages Per Row"),
            '#default_value' => isset($n->nid) ? $n->def_pages_per_row : 5
        );
        $form['diva']['max_zoomlevel'] = array(
            '#type' => 'textfield',
            '#title' => t("Max Zoom"),
            '#description' => t("Maximum Zoom level"),
            '#default_value' => isset($n->nid) ? $n->max_zoomlevel : 0,
        );
        $form['diva']['min_zoomlevel'] = array(
            '#type' => 'textfield',
            '#title' => t("Min Zoom"),
            '#description' => t("Minimum Zoom level"),
            '#default_value' => isset($n->nid) ? $n->min_zoomlevel : 0,
        );
        $form['diva']['def_zoomlevel'] = array(
            '#type' => 'textfield',
            '#title' => t("Default Zoom Level"),
            '#default_value' => isset($n->nid) ? $n->def_zoomlevel : 2,
        );
        $form['diva']['tile_width'] = array(
            '#type' => 'textfield',
            '#title' => t("Tile Width"),
            '#default_value' => isset($n->nid) ? $n->tile_width : _parse_tile(variable_get('diva_default_tile_size', "256x256"), 'width')
        );
        $form['diva']['tile_height'] = array(
            '#type' => 'textfield',
            '#title' => t("Tile Height"),
            '#default_value' => isset($n->nid) ? $n->tile_height : _parse_tile(variable_get('diva_default_tile_size', "256x256"), 'height')
        );
        $form['diva']['viewport'] = array(
            '#type' => 'textfield',
            '#title' => t("Viewport Size"),
            '#default_value' => isset($n->nid) ? $n->viewport : 200
        );
        $form['diva']['adaptive_padding'] = array(
            '#type' => 'textfield',
            '#title' => t("Adaptive Padding"),
            '#description' => t("The value of the adaptive padding setting"),
            '#default_value' => isset($n->nid) ? $n->adaptive_padding : 0.05
        );
    }
}

function diva_node_validate($node, $form) {

    dpm($form);
    dpm("Node Validate Called");
    $file = file_save_upload("diva_images", array(
        'file_validate_extensions' => array('zip gz'),
    ));
    
    $folder = $form['folder_name']['#value'];

    dpm("Folder: " . $folder);

    if($file) {

        if ($file->filemime == 'application/zip') {

        } else if (($file->filemime == 'application/x-gtar') || $file->filemime == 'application/x-gzip') {

        } else {
            form_set_error("diva_images", t("You can only upload zip or gzipped files (.zip, .tgz, .tar.gz)"));
        }

        if(file_prepare_directory($pth, FILE_CREATE_DIRECTORY|FILE_MODIFY_PERMISSIONS)) {
            if($file = file_move($file, $pth_wrap)) {
                $form_state['storage']['file'] = $file;
                $form_state['storage']['tdir'] = $pth;
            } else {
                form_set_error("diva_images", t("Could not move the file to the upload folder"));
            }
        } else {
            form_set_error("diva_images", t("Failed to create a temporary upload folder."));
        }
    } else {
        form_set_error("diva_images", t("No File was Entered"));
    }
}

function diva_node_submit($form, &$form_state) {
    dpm("Node Submit Called");
    $file = $form_state['storage']['file'];
    $tdir = $form_state['storage']['tdir'];
    
    $folder = $form['folder_name'];

    $pth = "public://" . $folder;

    if(file_prepare_directory($pth, FILE_CREATE_DIRECTORY|FILE_MODIFY_PERMISSIONS)) {

    } else {
        drupal_set_message(t("Could not create the final directory"));
    }

}

function diva_node_load($nodes) {
    dpm("Node Load Called");
    dpm($nodes);
    $result = db_query('SELECT * FROM {diva_data}  WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
    foreach($result as $record) {
        $tn = $nodes[$record->nid];
        $tn->folder_name = $record->folder_name;
        $tn->adaptive_padding = $record->adaptive_padding;
        $tn->fullscreen = $record->fullscreen;
        $tn->gotopage = $record->gotopage;
        $tn->grid = $record->grid;
        $tn->gridslider = $record->gridslider;
        $tn->keyscroll = $record->keyscroll;
        $tn->spacescroll = $record->spacescroll;
        $tn->zoomslider = $record->zoomslider;
        $tn->fixed_height_grid = $record->fixed_height_grid;
        $tn->max_pages_per_row = $record->max_pages_per_row;
        $tn->min_pages_per_row = $record->min_pages_per_row;
        $tn->def_pages_per_row = $record->def_pages_per_row;
        $tn->max_zoomlevel = $record->max_zoomlevel;
        $tn->min_zoomlevel = $record->min_zoomlevel;
        $tn->def_zoomlevel = $record->def_zoomlevel;
        $tn->tile_width = $record->tile_width;
        $tn->tile_height = $record->tile_height;
        $tn->viewport = $record->viewport;
    }
}

function diva_node_insert($node) {
    dpm("Node Insert Called");
    db_insert('diva_data')
        ->fields(array(
            'nid' => $node->nid,
            'folder_name' => $node->folder_name,
            'adaptive_padding' => $node->adaptive_padding,
            'fullscreen' => $node->fullscreen,
            'gotopage' => $node->goto_page,
            'grid' => $node->grid,
            'gridslider' => $node->grid_slider,
            'keyscroll' => $node->keyscroll,
            'spacescroll' => $node->spacescroll,
            'zoomslider' => $node->zoomslider,
            'fixed_height_grid' => $node->fixed_height_grid,
            'max_pages_per_row' => $node->max_pages_per_row,
            'min_pages_per_row' => $node->min_pages_per_row,
            'def_pages_per_row' => $node->def_pages_per_row,
            'max_zoomlevel' => $node->max_zoomlevel,
            'min_zoomlevel' => $node->min_zoomlevel,
            'def_zoomlevel' => $node->def_zoomlevel,
            'tile_width' => $node->tile_width,
            'tile_height' => $node->tile_height,
            'viewport' => $node->viewport
        ))
        ->execute();
}

function diva_node_delete($node) {
    dpm("Node Delete Called");
    db_delete('diva_data')
        ->condition('nid', $node->nid)
        ->execute();

}

function diva_node_update($node) {
    dpm("Node Update Called");
    db_update('diva_data')
        ->fields(array(
            'folder_name' => $node->folder_name,
            'adaptive_padding' => $node->adaptive_padding,
            'fullscreen' => $node->fullscreen,
            'gotopage' => $node->goto_page,
            'grid' => $node->grid,
            'gridslider' => $node->grid_slider,
            'keyscroll' => $node->keyscroll,
            'spacescroll' => $node->spacescroll,
            'zoomslider' => $node->zoomslider,
            'fixed_height_grid' => $node->fixed_height_grid,
            'max_pages_per_row' => $node->max_pages_per_row,
            'min_pages_per_row' => $node->min_pages_per_row,
            'def_pages_per_row' => $node->def_pages_per_row,
            'max_zoomlevel' => $node->max_zoomlevel,
            'min_zoomlevel' => $node->min_zoomlevel,
            'def_zoomlevel' => $node->def_zoomlevel,
            'tile_width' => $node->tile_width,
            'tile_height' => $node->tile_height,
            'viewport' => $node->viewport
        ))
        ->condition('nid', $node->nid)
        ->execute();
}

function diva_node_view($node, $build_mode = "full") {
    dpm("Node View Called");
    // dpm($node);
}

function diva_theme() {
    dpm("Diva theme called");
    return array(
        'node__diva' => array(
            'variables' => array('content' => "Hello."),
            'template' => 'node--diva',
        )
    );
}

function diva_page() {
    $content = "Hello.";
    return theme('diva', $content);
}

function diva_preprocess_node(&$vars, $hook) {
    drupal_add_js(drupal_get_path('module', 'diva') . '/diva.js/js/diva.js');
    drupal_add_js(drupal_get_path('module', 'diva') . '/diva.js/js/diva-utils.js');
    drupal_add_css(drupal_get_path('module', 'diva') . "/diva.js/css/diva.css", array('weight' => 9000));
    drupal_add_css(drupal_get_path('module', 'diva') . "/diva.js/css/pnotify.css");

    drupal_add_library('system', 'ui.slider');

    drupal_add_js(array('diva' => array(
        'adaptivePadding' => floatval($vars['adaptive_padding']),
        
        'folder' => $vars['folder_name'],

        'fixedHeightGrid' => (boolean)$vars['fixed_height_grid'],
        'fullScreen' => (boolean)$vars['fullscreen'],
        'goToPage' => (boolean)$vars['gotopage'],
        'grid' => (boolean)$vars['grid'],
        'gridSlider' => (boolean)$vars['gridslider'],
        'keyScroll' => (boolean)$vars['keyscroll'],
        'spaceScroll' => (boolean)$vars['spacescroll'],
        'zoomSlider' => (boolean)$vars['zoomslider'],
        
        'maxPagesPerRow' => intval($vars['max_pages_per_row']),
        'minPagesPerRow' => intval($vars['min_pages_per_row']),
        'defPagesPerRow' => intval($vars['def_pages_per_row']),
        'maxZoomLevel' => intval($vars['max_zoomlevel']),
        'minZoomLevel' => intval($vars['min_zoomlevel']),
        'defZoomLevel' => intval($vars['def_zoomlevel']),
        'tileWidth' => intval($vars['tile_width']),
        'tileHeight' => intval($vars['tile_height']),
        'viewport' => intval($vars['viewport']),

        'imageserver' => variable_get('diva_image_server', NULL),

    )), 'setting');

    $init_diva = '(function($) {
                        Drupal.behaviors.diva = {
                            attach: function(context, settings) {
                                d = Drupal.settings.diva;
                                console.log(d);
                                $("#diva-wrapper", context).diva({
                                    enableAutoTitle: false,
                                    fixedPadding: 20,
                                    tileFadeSpeed: 0,
                                    
                                    adaptivePadding: d.adaptivePadding,
                                    fixedHeightGrid: d.fixedHeightGrid,
                                    pagesPerGridRow: d.defPagesPerRow,
                                    enableZoomSlider: d.zoomSlider,
                                    enableFullscreen: d.fullScreen,
                                    enableGrid: d.grid,
                                    enableGridSlider: d.gridSlider,
                                    enableKeyScroll: d.keyScroll,
                                    enableSpaceScroll: d.spaceScroll,
                                    enableGotoPage: d.goToPage,
                                    maxPagesPerRow: d.maxPagesPerRow,
                                    minPagesPerRow: d.minPagesPerRow,
                                    pagesPerRow: d.defPagesPerRow,
                                    maxZoomLevel: d.maxZoomLevel,
                                    minZoomLevel: d.minZoomLevel,
                                    zoomLevel: d.defZoomLevel,
                                    viewportMargin: d.viewport,
                                    tileHeight: d.tileHeight,
                                    tileWidth: d.tileWidth,

                                    iipServerBaseUrl: d.imageserver + "?FIF=/mnt/images/berojp2/", 
                                    backendServer: "/diva/divaserve?d=" + d.folder
                                });
                                var dv = $("#diva-wrapper", context).data("diva");
                            }
                        }
                  })(jQuery);';
    drupal_add_js($init_diva, array('type' => 'inline', 'preprocess' => TRUE));
}


function _diva_folder_name_exists() {
    return FALSE;
}

function _parse_tile($dimensions, $return_dim) {
    $d = explode("x", $dimensions);
    if($return_dim == 'width') {
        return $d[0];
    } else {
        return $d[1];
    }
}